---
import * as CONFIG from '../../config';
import t from '../Language/language.json';
import { Language } from '../Language/language';
import { mapNavPage } from './NavPage.astro';
import type { NavPage } from './NavPage.astro';
import type { MarkdownInstance } from 'astro';

type Props = {
  lang: string;
};
const { lang } = Astro.props as Props;

const language = new Language(lang);
const aria = t.aria;
const _ = (entry: { [key: string]: string }) => language.translate(entry);

const currentUrl = new URL(Astro.request.url);
const mapWithUrl = (page: MarkdownInstance<Record<string, any>>) => {
  return mapNavPage(page, currentUrl);
};

const allPages = await Astro.glob('../../pages/**/*.md');

// ' aria-current="page"' needs to be added to current page
const parts = currentUrl.pathname.split('/');
let path = '';
const items: NavPage[] = [];

for (let i = 0; i < parts.length; i++) {
  const part = parts[i];

  if (part.length > 0) {
    path += '/' + parts[i];
  }
  
  const search = path ;
  const found = allPages.filter((p) => p.url == search);
  if (found.length > 0) {
    items.push(mapWithUrl(found[0]))
  }
}
---
<nav class="site-breadcrumbs" aria-label={ _(aria.breadcrumbs) }>
  <ol vocab="http://schema.org/" typeof="BreadcrumbList">
    {items.map((page, index) => (
      <li property="itemListElement" typeof="ListItem">
      <a property="item" typeof="WebPage" href={ page.url } aria-current={ page.ariaCurrent }>
        <span property="name">{ page.title }</span>
        <meta property="position" content={ index.toString() } />
      </a>
    </li>
    ))}
  </ol>
</nav>