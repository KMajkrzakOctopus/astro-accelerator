---
import t from '../Language/language.json';
import { Language } from '../Language/language';
import { mapNavPage, popMatchingPage } from '../../utilities/NavPage.astro';
import type { NavPage } from '../../utilities/NavPage.astro';
import type { MarkdownInstance } from 'astro';

// Properties
type Props = {
  lang: string;
};
const { lang } = Astro.props as Props;

// Language
const language = new Language(lang);
const aria = t.aria;
const _ = (entry: { [key: string]: string }) => language.translate(entry);

// Logic
const currentUrl = new URL(Astro.request.url);
const mapWithUrl = (page: MarkdownInstance<Record<string, any>>) => {
  return mapNavPage(page, currentUrl);
};

const allPages = await Astro.glob('../../pages/**/*.md');

const parts = currentUrl.pathname.split('/');
const items: NavPage[] = [];
let path = '';

parts.forEach((part) => {
  path += part.length > 0 ? '/' + part : '';
  const match = popMatchingPage(allPages, path);

  if (match) {
    items.push(mapWithUrl(match));
  }
});
---
<nav class="site-breadcrumbs" aria-label={ _(aria.breadcrumbs) }>
  <ol vocab="http://schema.org/" typeof="BreadcrumbList">
    {items.map((page, index) => (
      <li property="itemListElement" typeof="ListItem">
      <a property="item" typeof="WebPage" href={ page.url } aria-current={ page.ariaCurrent }>
        <span property="name">{ page.title }</span>
        <meta property="position" content={ index.toString() } />
      </a>
    </li>
    ))}
  </ol>
</nav>