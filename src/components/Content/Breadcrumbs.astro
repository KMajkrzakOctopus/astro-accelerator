---
import t from '@language/language.json';
import { Lang } from '@language/language';
import { mapNavPage, popMatchingPage } from '@utilities/NavPage.astro';
import type { NavPage } from '@utilities/NavPage.astro';
import type { MarkdownInstance } from 'astro';

// Properties
type Props = {
  lang: string;
};
const { lang } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
const currentUrl = new URL(Astro.request.url);
const mapWithUrl = (page: MarkdownInstance<Record<string, any>>) => {
  return mapNavPage(page, currentUrl);
};

const allPages = await Astro.glob('../../pages/**/*.md');

const parts = currentUrl.pathname.split('/');
const items: NavPage[] = [];
let path = '';

parts.forEach((part) => {
  path += part.length > 0 ? '/' + part : '';
  const match = popMatchingPage(allPages, path);

  if (match) {
    items.push(mapWithUrl(match));
  }
});
---
<style>
  /* Breadcrumbs */

ol {
    font-size: 0.8rem;
    background-color: var(--aft-breadcrumb);
    color: var(--fore-breadcrumb);
    padding: 0 1em;
}

li {
    display: inline-block;
    padding: 0.2em;
}

li::before {
    content: '>'
}

li:first-child::before {
    content: ''
}

a[aria-current] {
    color: var(--fore);
    text-decoration: none;
}

@media (max-width: 860px) {
  ol {
    text-align: center;
  }
}
</style>
<nav class="site-breadcrumbs" aria-label={ _(t.aria.breadcrumbs) }>
  <ol vocab="http://schema.org/" typeof="BreadcrumbList">
    {items.map((page, index) => (
      <li property="itemListElement" typeof="ListItem">
      <a property="item" typeof="WebPage" href={ page.url } aria-current={ page.ariaCurrent }>
        <span property="name">{ page.title }</span>
        <meta property="position" content={ index.toString() } />
      </a>
    </li>
    ))}
  </ol>
</nav>