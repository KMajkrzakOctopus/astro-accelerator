---
import t from '../Language/language.json';
import { Lang } from '../Language/language';
import type { NavPage } from '../../utilities/NavPage.astro';

// Properties
type Props = {
  lang: string;
  navPage: NavPage
};
const { lang, navPage } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
// -
---
<style>
li {
    list-style: none;
}

a {
    text-indent: var(--marker-size);
    width: calc(100% - 2rem);
    display: inline-block;
    padding: 0.5rem 1rem;
}

li.has-children summary span {
    text-indent: 0;
    width: calc(100% - 2rem - var(--marker-size));
    display: inline-block;
    padding: 0.5rem 1rem;
    text-decoration: underline;
}

li.has-children ul a {
    width: calc(100% - 2rem);
    text-indent: calc(var(--marker-size) * 2);
}

a[aria-current] {
    font-weight: bold;
}

details summary {
    cursor: pointer;
}

details summary::-webkit-details-marker,
details summary::marker {
    font-size: var(--marker-size);
    width: 1em;
}
</style>
{(navPage.children.length == 0) && (
<li>
  <a href={ navPage.url } aria-current={ navPage.ariaCurrent }>{ navPage.title }</a>
</li>
)}
{(navPage.children.length > 0) && (
<li class="has-children">
  <details class="sub-nav" open={ navPage.isOpen }>
    <summary><span>{ navPage.section }</span></summary>
    <ul>

      { navPage.children.sort((a, b) => a.order - b.order).map((page) => (
          <Astro.self lang={lang} navPage={page} />
      ))}
    </ul>
  </details>
</li>
)}