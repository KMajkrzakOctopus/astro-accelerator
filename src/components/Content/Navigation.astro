---
import t from '../Language/language.json';
import { Language } from '../Language/language';
import NavigationItem from './NavigationItem.astro';
import { mapNavPage } from './NavPage.astro';
import type { NavPage } from './NavPage.astro';
import type { MarkdownInstance } from 'astro';

type Props = {
  lang: string;
};
const { lang } = Astro.props as Props;

const language = new Language(lang);
const navigation = t.navigation;
const aria = t.aria;
const _ = (entry: { [key: string]: string }) => language.translate(entry);

const currentUrl = new URL(Astro.request.url);
const mapWithUrl = (page: MarkdownInstance<Record<string, any>>) => {
  return mapNavPage(page, currentUrl);
};

const topLevelPages = await Astro.glob('../../pages/*.md');
const allPages = await Astro.glob('../../pages/**/*.md');

const pageHierarchy: NavPage[] = topLevelPages.map(mapWithUrl);
const pageList: NavPage[] = allPages.map(mapWithUrl);

for (let i = 0; i < pageHierarchy.length; i++) {
  const page = pageHierarchy[i];
  page.children = pageList
    .filter((mp) => 
      page.url != '/' 
      && mp.url != page.url
      && mp.url.startsWith(page.url))
    .sort((mp) => mp.order);
}
---
<nav class="site-nav" id="site-nav" aria-label={ _(aria.site_navigation) }>
  <h2 class="site-nav-title">{ _(navigation.title) }</h2>
  <ul>
    {pageHierarchy.sort((a, b) => a.order - b.order).map((page) => (
      <NavigationItem lang={lang} navPage={page} />
    ))}
  </ul>
</nav>