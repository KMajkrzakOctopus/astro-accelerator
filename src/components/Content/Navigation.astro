---
import { menu } from '../../navigation';
import t from '@language/language.json';
import { Lang } from '@language/language';
import NavigationItem from '@content/NavigationItem.astro';
import { mapNavPage } from '@utilities/NavPage.astro';
import { NavPage, isNavPage } from '@utilities/NavigationTypes';
import { showInMenu } from '@utilities/PageTypeFilters';
import type { MarkdownInstance } from 'astro';

// Properties
type Props = {
  lang: string;
};
const { lang } = Astro.props as Props;

// Language
const _ = Lang(lang);

// Logic
const currentUrl = new URL(Astro.request.url);
const mapWithUrl = (page: MarkdownInstance<Record<string, any>>) => {
  return mapNavPage(page, currentUrl);
};

const getPages = async () => {
  const topLevelPages = await Astro.glob('../../pages/*.md');
  const allPages = await Astro.glob('../../pages/**/*.md');

  const pageHierarchy: NavPage[] = topLevelPages
    .filter(showInMenu)
    .map(mapWithUrl);

  const pageList: NavPage[] = allPages
    .filter(showInMenu)
    .map(mapWithUrl);

  for (let i = 0; i < pageHierarchy.length; i++) {
    const page = pageHierarchy[i];
    page.children = pageList
      .filter((mp) => 
        page.url != '/' 
        && mp.url != page.url
        && mp.url.startsWith(page.url))
      .sort((mp) => mp.order);
  }

  return pageHierarchy;
}

const setCurrent = (item: NavPage) => {
  item.isOpen = currentUrl.pathname.startsWith(item.url);
  item.ariaCurrent = item.url == currentUrl.pathname
    ? 'page'
    : false;
  item.children.forEach(setCurrent);
}

let pages: NavPage[] = []

for (let i = 0; i < menu.length; i++) {
  const item = menu[i];
  if (isNavPage(item)) {
      setCurrent(item);
      pages.push(item);
  } else {
    const p = await getPages();
    for (let j = 0; j < p.length; j++) {
      pages.push(p[j]);
    }
  }
}
---
<style>
/* Navigation */

nav.site-nav.sticky {
    align-self: start;
    position: sticky;
}

nav.site-nav h2 {
    margin-top: 0.1em;
    display: none;
}

@media (max-width: 860px) {
  nav.site-nav h2 {
      display: block;
  }

  nav.site-nav {
      grid-row: 2;
  }
}
</style>
<nav class="site-nav" id="site-nav" aria-label={ _(t.aria.site_navigation) }>
  <h2 class="site-nav-title">{ _(t.navigation.title) }</h2>
  <ul>
    {pages.sort((a, b) => a.order - b.order).map((page) => (
      <NavigationItem lang={lang} navPage={page} />
    ))}
  </ul>
</nav>